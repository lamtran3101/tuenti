<?php
define("TOP", "top");
define("TOPLEFT", "topleft");
define("TOPRIGHT", "topright");
define("LEFT", "left");
define("RIGHT", "right");
define("BOTTOM", "bottom");
define("BOTTOMLEFT", "bottomleft");
define("BOTTOMRIGHT", "bottomright");

function isBlankLine($line) {
	if($line == "\n" OR $line == "") return true;
	return false;
}

function getNumberOfCases($line) {
	$number = intval($line);
	return $number;
}

function getParamters($line) {
	$params = getNumbersFromLine($line);
	return $params;
}

function getNumbersFromLine($line) {
	$numbers = array();
	$params = explode(" ", $line);
	foreach ($params as $value) {
		$numbers[] = intval($value);
	}
	return $numbers;
}


class Point {
	var $x, $y;
	var $s, $c, $d;
	var $prevPoint;
}

function getMaximumSections($params) {
	$maximumSections = 0;
	$s = $params[0];
    $c = $params[1];
    $d = $params[2];
    $totalSections = $s + $c + $d; 
    if(checkNumberofCurves($c)) {
    	$startPoint = new Point;
    	assignLocation($startPoint , max($s, $c, $d), 0);
    	assignCurrentSections($startPoint, $s, $c, $d);
    	$startPoint->prevPoint = null;

    	$mapa = initMapa($startPoint);
    	travel($maximumSections, $mapa, $startPoint, $startPoint, $totalSections);
    }
	return $maximumSections;
}

function checkNumberofCurves($c) {
	return $c > 3;
}

function assignLocation(&$point, $x, $y) {
	$point->x = $x;
    $point->y = $y;
}

function assignCurrentSections(&$point, $s, $c, $d) {
	$point->s = $s;
    $point->c = $c;
    $point->d = $d;
}

function initMapa($startPoint) {
	$mapa = array();
	$mapa[$startPoint->x][0] = true;
	return $mapa;
}

function travel(&$maximumSections, &$mapa, $startPoint, $currenPoint, $total) {
	if(isStartPoint($currenPoint, $startPoint)) {
    	$maximumSections = updateMaximumSections($currenPoint->s, $currenPoint->c, $currenPoint->d, $total, $maximumSections);
    	return;
    }

	$posibleNextLocations = getPosibleNextLocations($currenPoint, $mapa, $startPoint);
	foreach ($posibleNextLocations as $nextLocaltion) {
		var_dump($mapa);
		var_dump($nextLocaltion->x);
		var_dump($nextLocaltion->y);
		if(canCloseGraph($nextLocaltion, $startPoint)) {
			updateMapa($mapa, $nextLocaltion);
			travel($maximumSections, $mapa, $startPoint, $nextLocaltion, $total);
			revertMapa($mapa, $nextLocaltion);
		}
	}
}

function isStartPoint($currenPoint, $startPoint) {
	return $currenPoint->x == $startPoint->x AND $currenPoint->x == $startPoint->x AND $currenPoint->prevPoint != null; 
}

function updateMaximumSections($s, $c, $d, $total, $maximumUsed) {
	$currentUsed = getSectionsUsed($s, $c, $d, $total);
	return max($currentUsed, $maximumUsed);
}

function getSectionsUsed($s, $c, $d, $total) {
	return $total - $s - $c - $d;
}

function getPosibleNextLocations($currentLocaltion, &$mapa, $startPoint) {
	
	$PosibleNextLocations = array();
	getLocations($PosibleNextLocations, TOP, $currentLocaltion, $mapa, $startPoint);
	getLocations($PosibleNextLocations, TOPLEFT, $currentLocaltion, $mapa, $startPoint);
	getLocations($PosibleNextLocations, TOPRIGHT, $currentLocaltion, $mapa, $startPoint);
	getLocations($PosibleNextLocations, LEFT, $currentLocaltion, $mapa, $startPoint);
	getLocations($PosibleNextLocations, RIGHT, $currentLocaltion, $mapa, $startPoint);
	getLocations($PosibleNextLocations, BOTTOM, $currentLocaltion, $mapa, $startPoint);
	getLocations($PosibleNextLocations, BOTTOMLEFT, $currentLocaltion, $mapa, $startPoint);
	getLocations($PosibleNextLocations, BOTTOMRIGHT, $currentLocaltion, $mapa, $startPoint);
	return $PosibleNextLocations;
}

function getLocations(&$nextLocations, $direction, $currentLocaltion, $mapa, $startPoint) {
	if(!isGoback($currentLocaltion, $direction)) {
		$x = $currentLocaltion->x;
		$y = $currentLocaltion->y;
		$s = $currentLocaltion->s;
		$c = $currentLocaltion->c;
		$d = $currentLocaltion->d;
		switch ($direction) {
			case TOP:
				if($s != 0 && !isVisited($x, $y -1, $mapa, $startPoint)) {
					$nextPoint = new Point;
					assignLocation($nextPoint , $x, $y -1);
	    			assignCurrentSections($nextPoint, $s-1, $c, $d);
	    			$nextPoint->prevPoint = $currentLocaltion;
	    			$nextLocations[] = $nextPoint;
				}
				if($d != 0 && !isVisited($x, $y - 2, $mapa, $startPoint)) {
					$nextPoint = new Point;
					assignLocation($nextPoint , $x, $y - 2);
	    			assignCurrentSections($nextPoint, $s, $c, $d-1);
	    			$nextPoint->prevPoint = $currentLocaltion;
	    			$nextLocations[] = $nextPoint;
				}
				break;
			case TOPLEFT:
				if($c != 0 && !isVisited($x - 1, $y -1, $mapa, $startPoint)) {
					$nextPoint = new Point;
					assignLocation($nextPoint , $x - 1, $y -1);
	    			assignCurrentSections($nextPoint, $s, $c - 1, $d);
	    			$nextPoint->prevPoint = $currentLocaltion;
	    			$nextLocations[] = $nextPoint;
				}
				break;
			case TOPRIGHT:
				if($c != 0 && !isVisited($x + 1, $y -1, $mapa, $startPoint)) {
					$nextPoint = new Point;
					assignLocation($nextPoint , $x + 1, $y -1);
	    			assignCurrentSections($nextPoint, $s, $c - 1, $d);
	    			$nextPoint->prevPoint = $currentLocaltion;
	    			$nextLocations[] = $nextPoint;
				}
				break;
			case BOTTOM:
				if($s != 0 && !isVisited($x, $y + 1, $mapa, $startPoint)) {
					$nextPoint = new Point;
					assignLocation($nextPoint , $x , $y + 1);
	    			assignCurrentSections($nextPoint, $s - 1, $c , $d);
	    			$nextPoint->prevPoint = $currentLocaltion;
	    			$nextLocations[] = $nextPoint;
				}
				if($d != 0 && !isVisited($x, $y  + 2, $mapa, $startPoint)) {
					$nextPoint = new Point;
					assignLocation($nextPoint , $x, $y + 2);
	    			assignCurrentSections($nextPoint, $s, $c, $d - 1);
	    			$nextLocations[] = $nextPoint;
				}
				break;
			case BOTTOMLEFT:
				if($c != 0 && !isVisited($x - 1, $y  + 1, $mapa, $startPoint)) {
					$nextPoint = new Point;
					assignLocation($nextPoint , $x - 1, $y + 1);
	    			assignCurrentSections($nextPoint, $s, $c - 1, $d);
	    			$nextPoint->prevPoint = $currentLocaltion;
	    			$nextLocations[] = $nextPoint;
				}
				break;
			case BOTTOMRIGHT:
				if($c != 0 && !isVisited($x + 1, $y  + 1, $mapa, $startPoint)) {
					$nextPoint = new Point;
					assignLocation($nextPoint , $x + 1, $y + 1);
	    			assignCurrentSections($nextPoint, $s, $c - 1, $d);
	    			$nextPoint->prevPoint = $currentLocaltion;
	    			$nextLocations[] = $nextPoint;
				}
				break;
			case LEFT:
				if($s != 0 && !isVisited($x - 1, $y, $mapa, $startPoint)) {
					$nextPoint = new Point;
					assignLocation($nextPoint , $x - 1, $y);
	    			assignCurrentSections($nextPoint, $s - 1, $c, $d);
	    			$nextPoint->prevPoint = $currentLocaltion;
	    			$nextLocations[] = $nextPoint;
				}
				if($d != 0 && !isVisited($x - 2, $y, $mapa, $startPoint)) {
					$nextPoint = new Point;
					assignLocation($nextPoint , $x - 2, $y);
	    			assignCurrentSections($nextPoint, $s, $c , $d - 1);
	    			$nextPoint->prevPoint = $currentLocaltion;
	    			$nextLocations[] = $nextPoint;
				}
				break;
			case RIGHT:
				if($s != 0 && !isVisited($x + 1, $y, $mapa, $startPoint)) {
					$nextPoint = new Point;
					assignLocation($nextPoint , $x + 1, $y);
	    			assignCurrentSections($nextPoint, $s - 1, $c, $d);
	    			$nextPoint->prevPoint = $currentLocaltion;
	    			$nextLocations[] = $nextPoint;
				}
				if($d != 0 && !isVisited($x + 2, $y, $mapa, $startPoint)) {
					$nextPoint = new Point;
					assignLocation($nextPoint , $x + 2, $y);
	    			assignCurrentSections($nextPoint, $s, $c , $d - 1);
	    			$nextPoint->prevPoint = $currentLocaltion;
	    			$nextLocations[] = $nextPoint;
				}
				break;
			default:
				break;
		}
	}
}

function isGoback($currentLocaltion, $direction) {
	$prevPoint = $currentLocaltion->prevPoint;
	if($prevPoint != null){
		switch ($direction) {
			case TOP:
				return $prevPoint->y < $currentLocaltion->y;
			case TOPLEFT:
				return $prevPoint->y < $currentLocaltion->y AND $prevPoint->x < $currentLocaltion->x;
			case TOPRIGHT:
				return $prevPoint->y < $currentLocaltion->y AND $prevPoint->x > $currentLocaltion->x;
			case BOTTOM:
				return $prevPoint->y > $currentLocaltion->y;
			case BOTTOMLEFT:
				return $prevPoint->y > $currentLocaltion->y AND $prevPoint->x < $currentLocaltion->x;
			case BOTTOMRIGHT:
				return $prevPoint->y > $currentLocaltion->y AND $prevPoint->x > $currentLocaltion->x;
			case LEFT:
				return $prevPoint->x < $currentLocaltion->x;
			case RIGHT:
				return $prevPoint->x > $currentLocaltion->x;
			default:
				break;
		}
	}
	return false;
}

function isVisited($x, $y, $mapa, $startPoint) {
	if( $x < 0 OR $y < 0) return true;
	if($startPoint->x == $x AND $startPoint->y == $y) return true;
	return isset($mapa[$x][$y]) AND $mapa[$x][$y] == true;
}

function canCloseGraph($currentPoint, $startPoint) {
	$distance = abs($currentPoint->x - $startPoint->x) + abs($currentPoint->y - $startPoint->y);
	$possibleDistance = $currentPoint->s + $currentPoint->c * 2 + $currentPoint->d * 2; 
	return $possibleDistance >= $distance ;
}

function updateMapa(&$mapa, $nextLocaltion) {
	$prevPoint = $nextLocaltion->prevPoint;
	if($prevPoint != null) {
		$difX = $nextLocaltion->x - $prevPoint->x;
		if(abs($difX == 2)) {
			if($difX < 0) {
				$mapa[$nextLocaltion->x + 1][$nextLocaltion->y] = true;
			} else {
				$mapa[$nextLocaltion->x - 1][$nextLocaltion->y] = true;
			}
		}
		$difY = $nextLocaltion->y - $prevPoint->y;
		if(abs($difY == 2)) {
			if($difY < 0) {
				$mapa[$nextLocaltion->x][$nextLocaltion->y + 1] = true;
			} else {
				$mapa[$nextLocaltion->x][$nextLocaltion->y - 1] = true;
			}
		}
	}
	$mapa[$nextLocaltion->x][$nextLocaltion->y] = true;
}

function revertMapa(&$mapa, $nextLocaltion){
	$prevPoint = $nextLocaltion->prevPoint;
	if($prevPoint != null) {
		$difX = $nextLocaltion->x - $prevPoint->x;
		if(abs($difX == 2)) {
			if($difX < 0) {
				unset($mapa[$nextLocaltion->x + 1][$nextLocaltion->y]);
				if(sizeof($mapa[$nextLocaltion->x + 1] == 0)) {
					unset($mapa[$nextLocaltion->x + 1]);
				}
			} else {
				unset($mapa[$nextLocaltion->x - 1][$nextLocaltion->y]);
				if(sizeof($mapa[$nextLocaltion->x - 1] == 0)) {
					unset($mapa[$nextLocaltion->x - 1]);
				}
			}
		}
		$difY = $nextLocaltion->y - $prevPoint->y;
		if(abs($difY == 2)) {
			if($difY < 0) {
				unset($mapa[$nextLocaltion->x][$nextLocaltion->y + 1]);
			} else {
				unset($mapa[$nextLocaltion->x][$nextLocaltion->y - 1]);
			}
			if(sizeof($mapa[$nextLocaltion->x] == 0)) {
					unset($mapa[$nextLocaltion->x]);
				}
		}
	}
	unset($mapa[$nextLocaltion->x][$nextLocaltion->y]);
	if(sizeof($mapa[$nextLocaltion->x] == 0)) {
		unset($mapa[$nextLocaltion->x]);
	}
}


?>